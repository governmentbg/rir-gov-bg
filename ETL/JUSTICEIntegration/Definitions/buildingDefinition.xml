<?xml version="1.0" ?>
<!-- Building -->
<definition id="building" parentId="justiceBgObject" isAbstract="false" type="object"> 
	<fields>
		<!-- INSERT HEADERS HERE -->
		<field name="default_header" type="ANY" label="BUILDING_DEFAULT_HEADER" mandatory="false" displayType="system" dmsType="FORBIDDEN" />
		<field name="compact_header" type="an..4096" label="BUILDING_COMPACT_HEADER" mandatory="false" displayType="system" dmsType="FORBIDDEN" />
		<field name="breadcrumb_header" type="an..4096" label="BUILDING_BREADCRUMB_HEADER" mandatory="false" displayType="system" dmsType="FORBIDDEN" />
		<field name="tooltip_header" type="an..4096" label="BUILDING_TOOLTIP_HEADER" mandatory="false" displayType="system" dmsType="FORBIDDEN" />

		<!-- Building specific properties -->
		<field name="type" type="an..180">
			<value>BUILDING</value>
		</field>
		<field name="rdf:type" type="uri">
			<value>http://ittruse.ittbg.com/ontology/inventar#Building</value>
		</field>
		<field name="status" type="an..50" codelist="CL117" mandatory="true" filters="BuildingStatuses" />

		<field name="buildingDetails" type="an..2000" label="buildingDetails.label" order="105" displayType="editable" previewEmpty="true" uri="inv:buildingDetails" />
		<field name="administrationEmployee" type="uri" label="administrationEmployee.label" order="106" displayType="editable" multiValued="true" previewEmpty="true" uri="inv:administrationEmployee">

			<control id="PICKER">
				<control-param id="range" name="range">inv:Employee</control-param>
			</control>
		</field>
		<field name="buildingManagedByGovStructure" type="uri" label="buildingManagedByGovStructure.label" order="201" displayType="editable" multiValued="false" previewEmpty="true" uri="inv:buildingManagedByGovStructure">
			<control id="PICKER">
				<control-param id="range" name="range">inv:GovernmentStructure</control-param>
			</control>
		</field>
		<field name="buildingHasPremises" type="uri" label="buildingHasPremises.label" order="202" displayType="editable" multiValued="true" previewEmpty="true" uri="inv:buildingHasPremises">
			<control id="PICKER">
				<control-param id="range" name="range">inv:Premises</control-param>
			</control>
		</field>
		<field name="buildingHasGovStructure" type="uri" label="buildingHasGovStructure.label" order="203" displayType="editable" multiValued="true" previewEmpty="true" uri="inv:buildingHasGovStructure">
			<control id="PICKER">
				<control-param id="range" name="range">inv:GovernmentStructure</control-param>
			</control>
		</field>		
		<field name="buildingHasAsset" type="uri" label="buildingHasAsset.label" order="204" displayType="editable" multiValued="true" previewEmpty="true" uri="inv:buildingHasAsset">
			<control id="PICKER">
				<control-param id="range" name="range">inv:Asset</control-param>
			</control>
		</field>		
	</fields>

	<regions>
		<region id="addressDetails" order="10" displayType="editable" label="addressDetails.label">
			<fields>
				<field name="address" type="an..2000" label="address.label" order="102" mandatory="true" displayType="editable" previewEmpty="true" uri="emf:address" />
				<field name="buildingType" type="an..50" label="buildingType.label" order="103" mandatory="true" codelist="CL120" displayType="editable" previewEmpty="true" uri="inv:buildingType" />
				<field name="GPSCoordinates" type="an..100" label="gpsCoordinates.label" order="104" displayType="editable" previewEmpty="true" uri="inv:gpsCoordinates" />
			</fields>
		</region>
	</regions>

	<transitions>
		<!-- Specific transitions -->
		<transition id="releaseInOperation" label="releaseInOperation.label" eventId="releaseInOperation" purpose="transition" />
		<transition id="removeFromOperation" label="removeFromOperation.label" eventId="removeFromOperation" purpose="transition" />
	</transitions>

	<stateTransitions>	
		<stateTransition from="INIT" transition="create" to="IN_OPERATION" />

		<stateTransition from="IN_OPERATION" transition="editDetails" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="saveAsTemplate" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="move" to="IN_OPERATION"/>
		<stateTransition from="IN_OPERATION" transition="lock" to="IN_OPERATION"/>
		<stateTransition from="IN_OPERATION" transition="unlock" to="IN_OPERATION"/>
		<stateTransition from="IN_OPERATION" transition="managePermissions" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="addThumbnail" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="print" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="printTab" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="exportTabPDF" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="exportPDF" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="exportWord" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="exportTabWord" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="addWatchers" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="createInContext" to="IN_OPERATION"/>
		<stateTransition from="IN_OPERATION" transition="clone" to="IN_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="removeFromOperation" to="OUT_OF_OPERATION" />
		<stateTransition from="IN_OPERATION" transition="delete" to="DELETED" />
		<stateTransition from="IN_OPERATION" transition="revertVersion" to="IN_OPERATION" />

		<stateTransition from="OUT_OF_OPERATION" transition="editDetails" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="saveAsTemplate" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="move" to="OUT_OF_OPERATION"/>
		<stateTransition from="OUT_OF_OPERATION" transition="lock" to="OUT_OF_OPERATION"/>
		<stateTransition from="OUT_OF_OPERATION" transition="unlock" to="OUT_OF_OPERATION"/>
		<stateTransition from="OUT_OF_OPERATION" transition="managePermissions" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="addThumbnail" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="print" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="printTab" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="exportTabPDF" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="exportPDF" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="exportWord" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="exportTabWord" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="addWatchers" to="OUT_OF_OPERATION" />
	    <stateTransition from="OUT_OF_OPERATION" transition="createInContext" to="OUT_OF_OPERATION"/>
		<stateTransition from="OUT_OF_OPERATION" transition="releaseInOperation" to="IN_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="clone" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="delete" to="OUT_OF_OPERATION" />
		<stateTransition from="OUT_OF_OPERATION" transition="revertVersion" to="OUT_OF_OPERATION" />
	</stateTransitions>

	<filterDefinitions>
		<filter id="AssetStatuses" mode="INCLUDE">IN_OPERATION,OUT_OF_OPERATION</filter>
	</filterDefinitions>

	<labels>
		<label id="BUILDING_DEFAULT_HEADER">
			<value lang="en">
				<![CDATA[${eval(
               ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
               ${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
               ${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
               <span><img src="${thumbnailUri(64)}"/></span>
               <span>
                   <span class="truncate-element${if(${var.isLatest}).then( latest-revision)}${if(${var.isRevision}).then( revision)}">
                       <a ${var.href} class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}">
						${if(${get([emf:isDeleted])} == true).then(<span>(Deleted) </span>)}
                           ${if(${or(${var.isLatest} or ${var.isRevision})}).then(
                           	 <span data-property="title">${get([title])}</span>
                           ).else(
                               <span data-property="title">${get([title])}</span>
                           )}
                       </a>
                   </span>
				<br />Type: <span data-property="type">${CL([type])}</span>
                <br />Address: <span data-property="address">${get([address])}</span> 
				${if(${get([lockedBy])} <> null).then(<br /><span class="banner label label-warning">${label(lockedBy)}${user([lockedBy])}</span>)}
               </span>)}]]>
			</value>
			<value lang="bg">
				<![CDATA[${eval(
               ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
               ${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
               ${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
               <span><img src="${thumbnailUri(64)}"/></span>
               <span>
                   <span class="truncate-element${if(${var.isLatest}).then( latest-revision)}${if(${var.isRevision}).then( revision)}">
                       <a ${var.href} class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}">
						${if(${get([emf:isDeleted])} == true).then(<span>(Изтрит) </span>)}
                           ${if(${or(${var.isLatest} or ${var.isRevision})}).then(
                               <span data-property="title">${get([title])}</span> 							
                           ).else(
                               <span data-property="title">${get([title])}</span>							
                           )}
                       </a>
                   </span>
				<br />Тип: <span data-property="type">${CL([type])}</span>
                <br />Адрес: <span data-property="address">${get([address])}</span> 
				${if(${get([lockedBy])} <> null).then(<br /><span class="banner label label-warning">${label(lockedBy)}${user([lockedBy])}</span>)}
               </span>)}]]>
			</value>
		</label>
		<label id="BUILDING_COMPACT_HEADER">
			<value lang="en">
				<![CDATA[${eval(
               ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
               ${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
               ${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
               <span><img src="${thumbnailUri(16)}"/></span>
               <span>
				${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>)} 
				<span>
					<span class="truncate-element${if(${var.isLatest}).then( latest-revision)}${if(${var.isRevision}).then( revision)}">
						<a class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href}>
							${if(${get([emf:isDeleted])} == true).then(<span>(Deleted) </span>)}
							${if(${or(${var.isLatest} or ${var.isRevision})}).then(
								Revision: <span data-property="revisionNumber">${get([emf:revisionNumber])}</span> 
								<span data-property="title">${get([title])}&nbsp;</span> 
								<span data-property="type" style="color:#808080 !important">(${CL([type])})&nbsp;</span>
							).else(
								<span data-property="title">${get([title])}&nbsp;</span> 
								<span data-property="type" style="color:#808080 !important">(${CL([type])})&nbsp;</span>
							)}
						</a>
					</span>
				</span>
			</span>)}]]>
			</value>
			<value lang="bg">
				<![CDATA[${eval(
               ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
               ${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
               ${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
               <span><img src="${thumbnailUri(16)}"/></span>
               <span>
				${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>)} 
				<span>
					<span class="truncate-element${if(${var.isLatest}).then( latest-revision)}${if(${var.isRevision}).then( revision)}">
						<a class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)}" ${var.href}>
							${if(${get([emf:isDeleted])} == true).then(<span>(Изтрит) </span>)}
							${if(${or(${var.isLatest} or ${var.isRevision})}).then(
								Revision: <span data-property="revisionNumber">${get([emf:revisionNumber])}</span> 
								<span data-property="title">${get([title])}&nbsp;</span> 
								<span data-property="type" style="color:#808080 !important">(${CL([type])})&nbsp;</span>
							).else(
								<span data-property="title">${get([title])}&nbsp;</span> 
								<span data-property="type" style="color:#808080 !important">(${CL([type])})&nbsp;</span>
							)}
						</a>
					</span>
				</span>
			</span>)}]]>
			</value>
		</label>
		<label id="BUILDING_BREADCRUMB_HEADER">
			<value lang="bg">
				<![CDATA[${eval(
               ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
               ${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
               ${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
               <span><img src="${thumbnailUri(16)}"/></span>
               <span>
				${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>)} 
				<a class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)} ${if(${var.isLatest}).then( latest-revision)}${if(${var.isRevision}).then( revision)}" ${var.href}>
					${if(${get([emf:isDeleted])} == true).then(<span>(Изтрит) </span>)}
					<span data-property="title" style="font-size: 13px !important">${get([title])}</span>  
				</a>
			</span>)}]]>
			</value>
			<value lang="en">
				<![CDATA[${eval(
               ${var.href= ${if(${get([emf:isDeleted])} == false).then(href="${link(currentInstance)}")} }
               ${var.isLatest=${if((${get([emf:revisionType])}).matches(.*?latest)).then(true).else(false)}}
               ${var.isRevision=${if((${get([emf:revisionType])}).matches(.*?revision)).then(true).else(false)}}
               <span><img src="${thumbnailUri(16)}"/></span>
               <span>
				${if(${get([lockedBy])} <> null).then(<span class="lock-label"><i class="fa fa-lock fa-lg"></i></span>)} 
				<a class="instance-link ${if(${get([emf:isDeleted])} == true).then(instance-deleted).else(has-tooltip)} ${if(${var.isLatest}).then( latest-revision)}${if(${var.isRevision}).then( revision)}" ${var.href}>
					${if(${get([emf:isDeleted])} == true).then(<span>(Deleted) </span>)}
					<span data-property="title" style="font-size: 13px !important">${get([title])}</span>  
				</a>
			</span>)}]]>
			</value>
		</label>
		<label id="BUILDING_TOOLTIP_HEADER">
			<value lang="en">
				<![CDATA[${eval(#{eval(
                   <span class="thumbnail-content">
                       <img class="thumbnail" src="#thumbnailSource#" />
                   </span>
                   <span class="tooltip-data">
                       <span class="tooltip-header">
                           <a href="${link(currentInstance)}" class="instance-link" data-status="${get([status])}" data-id="${id.db}" data-uid="${id.uid}">
                               (<span data-type="${get([type])}">${CL([type])}</span>) 
                               <span data-title="${get([title])}">${get([title])}</span>
                           </a>
                       </span>
                       <span class="tooltip-row">
                           <label>Description: </label>
                           <span data-property="description">${get([description])}</span>
                       </span>						
                       <span class="tooltip-row">
                           <label>Created by: </label>
                           <span data-property="createdBy">${user(${get([createdBy])})}</span>
                       </span>
                       <span class="tooltip-row">
                           <label>Created on: </label>
                           <span data-property="createdOn">${date([createdOn]).format(dd/MM/yyyy, HH:mm)}</span>
                       </span>						
                       <span class="tooltip-row">
                           <label>Modified by: </label>
                           <span data-property="modifiedBy">${user(${get([modifiedBy])})}</span>
                       </span>
                       <span class="tooltip-row">
                           <label>Modified on: </label>
                           <span data-property="modifiedOn">${date([modifiedOn]).format(dd/MM/yyyy, HH:mm)}</span>
                       </span>
                       <span class="tooltip-row">
                           <label>Version: </label>
                           <span data-property="emf:version">${get([emf:version])}</span>
                       </span>							
                   </span>
               )})}]]>
			</value>
			<value lang="bg">
				<![CDATA[${eval(#{eval(
                   <span class="thumbnail-content">
                       <img class="thumbnail" src="#thumbnailSource#" />
                   </span>
                   <span class="tooltip-data">
                       <span class="tooltip-header">
                           <a href="${link(currentInstance)}" class="instance-link" data-status="${get([status])}" data-id="${id.db}" data-uid="${id.uid}">
                               (<span data-type="${get([type])}">${CL([type])}</span>) 
                               <span data-title="${get([title])}">${get([title])}</span>
                           </a>
                       </span>
					   <span data-property="buildingHasGovStructure">
							<label>Структури които се помещават:&nbsp;</label>
							${objectProperty(${get([buildingHasGovStructure])})}
					   </span></br>
					   <span class="tooltip-row">
                           <label>Адрес: </label>
                           <span data-property="address">${get([address])}</span>
						</span>	
						<span class="tooltip-row">
                           <label>Тип на сграда: </label>
                           <span data-property="buildingType">${CL([buildingType])}</span>
						</span>					
                   </span>
               )})}]]>
			</value>
		</label>
	</labels>
</definition>